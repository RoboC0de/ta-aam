{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","event","searchYelp","preventDefault","sortByOption","setState","target","value","Object","keys","sortByOptionValue","onClick","handleSortbyChange","getSortByClass","renderSortByOptions","onChange","placeholder","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7483e132.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Business.css\";\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    const { business } = this.props;\r\n    return (\r\n      <div className=\"Business\">\r\n        <div className=\"image-container\">\r\n          <img src={this.props.business.imageSrc} alt=\"\" />\r\n        </div>\r\n        <h2>{business.name}</h2>\r\n        <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n            <p>{business.address}</p>\r\n            <p>{business.city}</p>\r\n            <p>\r\n              {business.state} {business.zipCode}\r\n            </p>\r\n          </div>\r\n          <div className=\"Business-reviews\">\r\n            <h3>{business.category}</h3>\r\n            <h3 className=\"rating\">{business.rating} stars</h3>\r\n            <p>{business.reviewCount} reviews</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Business;\r\n","import React from \"react\";\r\nimport \"./BusinessList.css\";\r\nimport Business from \"../Business/Business\";\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n        {this.props.businesses.map(business => {\r\n          return <Business key={business.id} business={business} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n      location: \"\",\r\n      sortBy: \"best_match\"\r\n    };\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n\r\n    this.sortByOptions = {\r\n      \"Best Match\": \"best_match\",\r\n      \"Highest Rated\": \"rating\",\r\n      \"Most Reviewed\": \"review_count\"\r\n    };\r\n  }\r\n\r\n  handleSearch(event) {\r\n    this.props.searchYelp(\r\n      this.state.term,\r\n      this.state.location,\r\n      this.state.sortBy\r\n    );\r\n    event.preventDefault();\r\n  }\r\n\r\n  getSortByClass(sortByOption) {\r\n    if (this.state.sortBy === sortByOption) {\r\n      return \"active\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  handleSortbyChange(sortByOption) {\r\n    this.setState({\r\n      sortBy: sortByOption\r\n    });\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({\r\n      term: event.target.value\r\n    });\r\n  }\r\n\r\n  handleLocationChange(event) {\r\n    this.setState({\r\n      location: event.target.value\r\n    });\r\n  }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map(sortByOption => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n        <li\r\n          onClick={this.handleSortbyChange.bind(this, sortByOptionValue)}\r\n          className={this.getSortByClass(sortByOptionValue)}\r\n          key={sortByOptionValue}\r\n        >\r\n          {sortByOption}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>{this.renderSortByOptions()}</ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input\r\n            onChange={this.handleTermChange}\r\n            placeholder=\"Search: restaurant, barber, bakeries etc. \"\r\n          />\r\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a onClick={this.handleSearch}>Let's Go</a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","const apiKey =\r\n  \"_kIf8q4pp25xbAcI-9E0HfMxJGSmAKqkSzT93uRRWg53J5mWD1Sa0IPfP5rpnN7GMZVa1QGDkwGl8xvNruhfTtZO0EnXSNyItK4vjJbuawcXHbhqK8IL2ZmJ2PdCXXYx\";\r\nconst Yelp = {\r\n  searchYelp(term, location, sortBy) {\r\n    return fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${apiKey}`\r\n        }\r\n      }\r\n    )\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(jsonResponse => {\r\n        if (jsonResponse.businesses) {\r\n          return jsonResponse.businesses.map(business => {\r\n            return {\r\n              id: business.id,\r\n              imageSrc: business.image_url,\r\n              name: business.name,\r\n              address: business.location.address1,\r\n              city: business.location.city,\r\n              state: business.location.state,\r\n              zipCode: business.location.zip_code,\r\n              category: business.categories[0].title,\r\n              rating: business.rating,\r\n              reviewCount: business.review_count\r\n            };\r\n          });\r\n        }\r\n      });\r\n  }\r\n};\r\n\r\nexport default Yelp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BusinessList from \"../BusinessList/BusinessList.js\";\nimport SearchBar from \"../SearchBar/SearchBar.js\";\nimport Yelp from \"../../util/Yelp.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.searchYelp(term, location, sortBy).then(businesses => {\n      this.setState({\n        businesses: businesses\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ta'aam</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}